{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/Filter/Filter.module.css","redux/contactList-action.js","components/ContactForm/ContactForm.js","components/ContactsList/ContactsList.js","components/Filter/Filter.js","App.js","redux/contactList-reducer.js","redux/store.js","index.js","components/ContactsList/ContactsList.module.css"],"names":["module","exports","addContact","createAction","data","payload","id","shortid","generate","name","number","deleteContact","filteredContact","ContactForm","state","nameInputId","handleChange","e","currentTarget","value","setState","handleSubmit","preventDefault","props","onSubmitProps","onSubmit","this","htmlFor","nameInputID","type","pattern","title","required","onChange","className","styles","input","Component","connect","dispatch","actions","filter","contacts","normaliseNameContact","toLowerCase","contact","includes","onDeleteContact","container","map","key","item","item__container","btn","onClick","target","App","contactListReducer","createReducer","find","alert","filterReducer","persistConfig","storage","blacklist","persistedReducer","persistReducer","combineReducers","rootReducer","store","configureStore","reducer","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","loadings","document","getElementById"],"mappings":"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","file":"static/js/main.bc1f3161.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"ContactForm_input__dDkaI\",\"btn\":\"ContactForm_btn__2ikuK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Filter_container__36WY3\"};","import shortid from 'shortid';\r\nimport { createAction } from '@reduxjs/toolkit';\r\n// import actionTypes from '../redux/contactList-types';\r\n\r\nexport const addContact = createAction('ADD_CONTACT', data => ({\r\n  payload: {\r\n    id: shortid.generate(),\r\n    name: data.name,\r\n    number: data.number,\r\n  },\r\n}));\r\n\r\nexport const deleteContact = createAction('DELETE_CONTACT');\r\n\r\nexport const filteredContact = createAction('FILTER_CONTACT');\r\n// export const filteredContact = createAction(actionTypes.FILTER_CONTACT);\r\n\r\n\r\n// export const addContact = ({ name, number }) => ({\r\n//   type: actionTypes.ADD_CONTACT,\r\n// //   type: 'ADD_CONTACT',\r\n//   payload: {\r\n//     id: shortid.generate(),\r\n//     name,\r\n//     number,\r\n//   },\r\n// });\r\n\r\n// export const deleteContact = contactId => ({\r\n//   type: actionTypes.DELETE_CONTACT,\r\n// //   type: 'DELETE_CONTACT',\r\n//   payload: contactId,\r\n// });\r\n\r\n// export const filteredContact = value => ({\r\n//   type: actionTypes.FILTER_CONTACT,\r\n// //   type: 'FILTER_CONTACT',\r\n//   payload: value,\r\n// });\r\n","import React, { Component } from 'react';\r\nimport shortid from 'shortid';\r\nimport { connect } from 'react-redux';\r\n\r\n// import * as actions from '../../redux/actions';\r\nimport * as actions from '../../redux/contactList-action';\r\n\r\nimport styles from './ContactForm.module.css';\r\n\r\nclass ContactForm extends Component {\r\n  state = {\r\n    id: '',\r\n    name: '',\r\n    number: '',\r\n  };\r\n\r\n  nameInputId = shortid.generate();\r\n\r\n  handleChange = e => {\r\n    const { name, value } = e.currentTarget;\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    this.props.onSubmitProps(this.state);\r\n    this.setState({ name: '', number: '' });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h2>Phonebook</h2>\r\n        <form onSubmit={this.handleSubmit}>\r\n          <label htmlFor={this.nameInputID}>\r\n            Name\r\n            <input\r\n              type=\"text\"\r\n              name=\"name\"\r\n              value={this.state.name}\r\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n              title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n              required\r\n              onChange={this.handleChange}\r\n              id={this.nameInputId}\r\n              className={styles.input}\r\n            />\r\n          </label>\r\n          <label>\r\n            Number\r\n            <input\r\n              type=\"tel\"\r\n              name=\"number\"\r\n              value={this.state.number}\r\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n              title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n              required\r\n              onChange={this.handleChange}\r\n              className={styles.input}\r\n            />\r\n          </label>\r\n          <button type=\"submit\" className={styles.input}>\r\n            Add contact\r\n          </button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// const mapStateToProps = state => {\r\n//   return {\r\n//    //  contacts: state.contacts,\r\n//     v: 25,\r\n//   };\r\n// };\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onSubmitProps: data => dispatch(actions.addContact(data)),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(ContactForm);\r\n// export default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\r\n","import React, { Component } from 'react';\r\n// import classNames from 'classnames';\r\nimport styles from './ContactsList.module.css';\r\nimport { connect } from 'react-redux';\r\n\r\n// import * as actions from '../../redux/actions';\r\nimport * as actions from '../../redux/contactList-action';\r\n\r\nconst ContactsList = ({ contacts, onDeleteContact }) => (\r\n  <div className={styles.container}>\r\n    <h2>Contacts</h2>\r\n    <ul>\r\n      {contacts.map(({ id, name, number }) => (\r\n        <li key={id} className={styles.item}>\r\n          <div className={styles.item__container}>\r\n            <p className={styles.name}>\r\n              {name}: {number}\r\n            </p>\r\n            <button\r\n              type=\"button\"\r\n              className={styles.btn}\r\n              onClick={() => {\r\n                onDeleteContact(id);\r\n              }}\r\n            >\r\n              Delete\r\n            </button>\r\n          </div>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  </div>\r\n);\r\n\r\nconst mapStateToProps = state => {\r\n  const { filter, contacts } = state;\r\n  const normaliseNameContact = filter.filter.toLowerCase();\r\n  //   const normaliseNameContact = filter.toLowerCase();\r\n  const filteredContacts = contacts.contacts.filter(contact =>\r\n    //   const filteredContacts = contacts.filter(contact =>\r\n    contact.name.toLowerCase().includes(normaliseNameContact),\r\n  );\r\n  return { contacts: filteredContacts };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onDeleteContact: id => dispatch(actions.deleteContact(id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactsList);\r\n","import React from 'react';\r\nimport styles from './Filter.module.css';\r\nimport { connect } from 'react-redux';\r\n\r\n// import * as actions from '../../redux/actions';\r\nimport * as actions from '../../redux/contactList-action';\r\n\r\n\r\n\r\nconst Filter = ({ value, onChange }) => (\r\n  <label className={styles.container} >\r\n    Find contacts by name <input type=\"text\" value={value} onChange={onChange} />\r\n  </label>\r\n);\r\n\r\nconst mapStateToProps = state => ({\r\n  value: state.filter.filter,\r\n  //   value: state.filter,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onChange: e => dispatch(actions.filteredContact(e.target.value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import React, { Component } from 'react';\nimport ContactForm from './components/ContactForm/ContactForm';\nimport ContactsList from './components/ContactsList/ContactsList';\nimport Filter from './components/Filter/Filter';\n// import shortid from 'shortid';\n\nclass App extends Component {\n  //   state = {\n  //     contacts: [\n  //       { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n  //       { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n  //       { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n  //       { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n  //     ],\n  //     name: '',\n  //     filter: '',\n  //   };\n//   state = {\n//     contacts: [],\n//     name: '',\n//     filter: '',\n//   };\n\n//   componentDidMount() {\n   //  const contacts = localStorage.getItem('contacts');\n   //  const parsedContacts = JSON.parse(contacts);\n\n   //  if (parsedContacts) {\n   //    this.setState({ contacts: parsedContacts });\n   //  }\n//   }\n\n//   componentDidUpdate(prevProps, prevState) {\n//     const nextContacts = this.state.contacts;\n//     const prevContacts = prevState.contacts;\n\n//     if (nextContacts !== prevContacts) {\n//       localStorage.setItem('contacts', JSON.stringify(nextContacts));\n//     }\n//   }\n\n//    dublicateContact = name => {\n//       const { contacts } = this.state;\n//       const isFind = contacts.find(contact => contact.name.toLowerCase() === name.toLowerCase());\n\n//       if (isFind) {\n//             //  this.setState(({ contacts }) => ({\n//             //    contacts: [contacts],\n//             //  }));\n//          this.deleteContact(isFind.id);\n//          alert('Контакт уже есть в списке !');\n//       }\n//    }\n   \n//   formSubmitHandler = data => {\n//     //   console.log(data);\n//     const {name, number} = data;\n     \n//    //   const contact = {\n//    //    id: shortid.generate(),\n//    //    name: data.name,\n//    //    number: data.number,\n//    //  };\n//      const contact = {\n//       id: shortid.generate(),\n//       name,\n//       number,\n//     };\n//    //  this.setState(prevState => ({\n//    //    contacts: [contact, ...prevState.contacts],\n//    //  }));\n//      this.setState(({ contacts }) => ({\n//        contacts: [contact, ...contacts],\n//      }));\n//      this.dublicateContact(name);\n//   };\n\n//   changeFilter = e => {\n//     this.setState({ filter: e.currentTarget.value });\n//   };\n\n//   deleteContact = contactId => {\n//     this.setState(prevState => ({\n//       contacts: prevState.contacts.filter(contact => contact.id !== contactId),\n//     }));\n//   };   \n   \n   \n//   getVisibleContacts = () => {\n//     const { filter, contacts } = this.state;\n//     const normalizedFilterer = filter.toLocaleLowerCase();\n\n//     return contacts.filter(contact =>\n//       contact.name.toLowerCase().includes(normalizedFilterer),\n//     );\n//   };\n\n\n\n  render() {\n   //  const filteredContacts = this.getVisibleContacts();\n    return (\n      <>\n        <div>\n          <ContactForm/>\n          {/* <ContactForm onSubmitProps={this.formSubmitHandler} /> */}\n          <Filter/>\n          {/* <Filter value={this.state.filter} onChange={this.changeFilter} /> */}\n          <ContactsList\n            // contacts={filteredContacts}\n            // onDeleteContact={this.deleteContact}\n          />\n        </div>\n      </>\n    );\n  }\n}\n\nexport default App;\n","import { createReducer } from '@reduxjs/toolkit';\r\nimport * as actions from '../redux/contactList-action';\r\n// import actionTypes from '../redux/contactList-types';\r\n// import { combineReducers } from 'redux';\r\n\r\nconst contactListInitialState = {\r\n  contacts: [],\r\n};\r\n\r\nexport const contactListReducer = createReducer(contactListInitialState, {\r\n  [actions.addContact]: (state, { payload }) => {\r\n    const { name } = payload;\r\n    const isFinded = state.contacts.find(\r\n      contact => contact.name.toLowerCase() === name.toLowerCase(),\r\n    );\r\n    if (isFinded) {\r\n      alert('Контакт уже есть в списке !');\r\n      return state;\r\n    }\r\n    return { contacts: [payload, ...state.contacts] };\r\n  },\r\n  [actions.deleteContact]: (state, { payload }) => ({\r\n    contacts: state.contacts.filter(contact => contact.id !== payload),\r\n  }),\r\n});\r\n\r\nconst filterInitialState = {\r\n  filter: '',\r\n};\r\n\r\nexport const filterReducer = createReducer(filterInitialState, {\r\n  [actions.filteredContact]: (state, { payload }) => ({\r\n    //   [actionTypes.FILTER_CONTACT]: (state, { payload }) => ({\r\n    filter: payload,\r\n  }),\r\n});\r\n\r\n//---with out reduxjs toolkit---\r\n\r\n// export const contactListReducer = (\r\n//   state = contactListInitialState,\r\n//   { type, payload },\r\n// ) => {\r\n//   switch (type) {\r\n//     case actionTypes.ADD_CONTACT:\r\n//    //  case 'ADD_CONTACT':\r\n//       const { name } = payload;\r\n//       const isFinded = state.contacts.find(\r\n//         contact => contact.name.toLowerCase() === name.toLowerCase(),\r\n//       );\r\n//       if (isFinded) {\r\n//         alert('Контакт уже есть в списке !');\r\n//         return state;\r\n//       }\r\n//       return { contacts: [payload, ...state.contacts] };\r\n//     case actionTypes.DELETE_CONTACT:\r\n//       return {\r\n//         contacts: state.contacts.filter(contact => contact.id !== payload),\r\n//       };\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// export const filterReducer = (state = filterInitialState, { type, payload }) => {\r\n//   switch (type) {\r\n//     case actionTypes.FILTER_CONTACT:\r\n//    //  case 'FILTER_CONTACT':\r\n//       return {\r\n//         filter: payload,\r\n//       };\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n//----- with combineReducers\r\n\r\n// export default combineReducers({\r\n//   contacts: contactListReducer,\r\n//   filter: filterReducer,\r\n// });\r\n","import { configureStore, combineReducers } from '@reduxjs/toolkit';\r\nimport * as rootReducer from '../redux/contactList-reducer';\r\nimport { persistStore, persistReducer } from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\n// import { composeWithDevTools } from 'redux-devtools-extension';\r\n// import { createStore, combineReducers } from 'redux';\r\n\r\n\r\nconst persistConfig = {\r\n  key: 'contacts',\r\n  storage,\r\n  blacklist: ['filter'],\r\n};\r\n\r\nconst persistedReducer = persistReducer(\r\n  persistConfig,\r\n  combineReducers({\r\n    contacts: rootReducer.contactListReducer,\r\n    filter: rootReducer.filterReducer,\r\n  }),\r\n);\r\n\r\nconst store = configureStore({\r\n  reducer: persistedReducer,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nconst persistor = persistStore(store);\r\n\r\nexport default {store, persistor};\r\n\r\n//------------- with combineReducers, createStore, composeWithDevTools \r\n\r\n// const initialState = {\r\n//   contacts: [],\r\n//   filter: '',\r\n// };\r\n\r\n// const reducer = (state = initialState, { type, payload }) => {\r\n//   //   console.log('Лог экшена в reducer: ', action);\r\n//   switch (type) {\r\n//     case 'ADD_CONTACT':\r\n//       const { name } = payload;\r\n//       const isFinded = state.contacts.find(\r\n//         contact => contact.name.toLowerCase() === name.toLowerCase(),\r\n//       );\r\n//       if (isFinded) {\r\n//         alert('Контакт уже есть в списке !');\r\n//         return state;\r\n//       }\r\n//       return { ...state, contacts: [payload, ...state.contacts] };\r\n//     case 'DELETE_CONTACT':\r\n//       return {\r\n//         ...state,\r\n//         contacts: state.contacts.filter(contact => contact.id !== payload),\r\n//       };\r\n//     case 'FILTER_CONTACT':\r\n//       return {\r\n//         ...state,\r\n//         filter: payload,\r\n//       };\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n\r\n// const contactListInitialState = {\r\n//   contacts: [],\r\n// };\r\n\r\n// const contactListReducer = (state = contactListInitialState, { type, payload }) => {\r\n//   switch (type) {\r\n//     case 'ADD_CONTACT':\r\n//       const { name } = payload;\r\n//       const isFinded = state.contacts.find(\r\n//         contact => contact.name.toLowerCase() === name.toLowerCase(),\r\n//       );\r\n//       if (isFinded) {\r\n//         alert('Контакт уже есть в списке !');\r\n//         return state;\r\n//       }\r\n//       return { contacts: [payload, ...state.contacts] };\r\n//     case 'DELETE_CONTACT':\r\n//       return {\r\n//         contacts: state.contacts.filter(contact => contact.id !== payload),\r\n//       };\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// const filterInitialState = {\r\n//   filter: '',\r\n// };\r\n\r\n// const filterReducer = (state = filterInitialState, { type, payload }) => {\r\n//   switch (type) {\r\n//     case 'FILTER_CONTACT':\r\n//       return {\r\n//         filter: payload,\r\n//       };\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// const reducer = (state = initialState, { type, payload }) => {\r\n//   //   console.log('Лог экшена в reducer: ', action);\r\n//   switch (type) {\r\n//     case 'ADD_CONTACT':\r\n//       const { name } = payload;\r\n//       const isFinded = state.contacts.find(\r\n//         contact => contact.name.toLowerCase() === name.toLowerCase(),\r\n//       );\r\n//       if (isFinded) {\r\n//         alert('Контакт уже есть в списке !');\r\n//         return state;\r\n//       }\r\n//       return { ...state, contacts: [payload, ...state.contacts] };\r\n//     case 'DELETE_CONTACT':\r\n//       return {\r\n//         ...state,\r\n//         contacts: state.contacts.filter(contact => contact.id !== payload),\r\n//       };\r\n//     case 'FILTER_CONTACT':\r\n//       return {\r\n//         ...state,\r\n//         filter: payload,\r\n//       };\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// const rootReducer = combineReducers({\r\n//   contacts: contactListReducer,\r\n//   filter: filterReducer,\r\n// });\r\n\r\n// const store = createStore(rootReducer, composeWithDevTools());\r\n// const store = createStore(reducer, composeWithDevTools());\r\n\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport App from './App';\n\nimport store from './redux/store';\n// import { myAction } from './redux/actions';\nimport 'modern-normalize/modern-normalize.css';\nimport './styles.css';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loadings={null} persistor={store.persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ContactsList_container__1D0Dp\",\"item\":\"ContactsList_item__1IZbZ\",\"name\":\"ContactsList_name__3W6Kz\",\"btn\":\"ContactsList_btn__3GaYL\",\"item__container\":\"ContactsList_item__container__3WqWA\"};"],"sourceRoot":""}